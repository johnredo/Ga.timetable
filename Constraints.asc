//Fitnes calculation constraints

//Hard Constraints
Each assignment must appear 2 times                     => evaluated at checkSubjectTwoTimes()              ########################### +10 => 60
subject.students must be lesser than room.capacity      => evaluated at fitnessBlock()                      $$$$$ mandatory
room.type must be equal to subject.need                 => evaluated at fitnessBlock()                      $$$$$ mandatory
subject.doubleBlock must appear at the timetable        => evaluated at checkDoubleBlock()                  ########################### +2 && +8 => 20
Subject must appear at teacher's list of topics         => evaluated at fitnessBlock()                      $$$$$ mandatory
The same teacher per subject                            => evaluated at checkTeacherOnSubject()             ########################### +10
No subjects allowed after 4PM on saturday               => evaluated at checkOnSaturdays()                  ########################### +5 => 60

//Soft Constraints
teacher.pref should appear at the created block         => evaluated at checkTeacherPref()                  ########################### +2
subjects on the same day should be as close as posible  => evaluated at checkConsecutives()
rooms should be as close as possible                    => evaluated at checkRoomsAreClose()
prevent isolated subjects on a day                      => evaluated at checkNonSingleDays()
doubleBlock in the same classroom                       => evaluated at checkDoubleBlock()
lunchTime on 12                                         => evaluated at checkLunchTime()

Fitness -> push() -> [] ... n*fitness

population[0].data.subjectName.unique();



//Cooments about the fitness function
Each correct subject appearing two times adds one point (score++;) "Total varies depending on the amount of subjects -> 3subj -> 3 points max"
Each doubleBlock assigned correctly gives 1 point, its max value is equal to the amount of doubleBlock subjects
Each subject must have the same teacher, its max point is equal to the amount of subjects
If the timetable is empty at 12 score++
if a doubleBlock is in the same classroom score++

think about some penalties

generate the coordinate first, then with that give x & y;

//Mutations
When there is a doubleBlock,and each subject with different teachers, makes it equal        => mutateDoubleBlock();
Move a subject to leave time for lunch                                                      => mutateLunch();
When there is a block alone on a day moves it to another day                                => mutateNonSingleDay();
Moves a subject to a teacher' preference                                                    => mutateSubjectToPref();
Moves a Saturday late-hour subject                                                          => mutateOnSaturday();
Take a subject and put it in an upper position


######################################################################
TO FIX:
FIX the crossover;
En el blockCreate no randomizar las materias, hacer siempre 2 por cada una y asignarle coordenadas unicas $$$$$
assign coord


61 64 46 51 22 31 82 74 43 12 14
///////////////////////////////////////////////////////////////////////////////////////////////////

function removeDuplicatesBy(keyFn, array) {
  var mySet = new Set();
  return array.filter(function(x) {
    var key = keyFn(x), isNew = !mySet.has(key);
    if (isNew) mySet.add(key);
    return isNew;
  });
}

function findWithAttr(array, attr, value) {
    for(var i = 0; i < array.length; i += 1) {
        if(array[i][attr] === value) {
            return i;
        }
    }
    return -1;
}

var newVector = removeDuplicatesBy(x => x.edad, vector);

library.sort(function(a,b) {return (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0);} );

function getAllIndexes(arr, val) {
    var indexes = [], i;
    for(i = 0; i < arr.length; i++)
        if (arr[i] === val)
            indexes.push(i);
    return indexes;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
possible solution for crossover
child = partnerA.concat(partnerB).unique();